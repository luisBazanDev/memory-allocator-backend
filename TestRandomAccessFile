package pe.bazan.luis.uni;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteOrder;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class TestRandomAccessFile {
    public static void main() throws IOException {
        String path = "E:\\chatLogDB.json";
        RandomAccessFile raf = new RandomAccessFile("E:\\chatLogDB.json", "r");
        RandomAccessFile raf2 = new RandomAccessFile("E:\\chatLogDB.json", "r");
        raf.seek(0);

        raf2.seek(1000000);

        System.out.println(raf2.readLine());
        System.out.println(raf2.readLine());
        System.out.println(raf2.readLine());

        List<MappedByteBuffer> mappedByteBuffers = buildChunks(raf);

        try(var executor = Executors.newVirtualThreadPerTaskExecutor()) {
            mappedByteBuffers.forEach(mappedByteBuffer -> {
                while (mappedByteBuffer.position() < mappedByteBuffer.limit()) {
                    var future = executor.submit(() -> {
                        StringBuilder builder = new StringBuilder();
                        int index = 0;
                        char letter = ' ';
                        while (index < mappedByteBuffer.limit() || letter == '\n') {
                            letter = mappedByteBuffer.getChar(index++);
                            System.out.println(letter);
                            builder.append(letter);
                        }

                        return builder;
                    });
                    try {
                        System.out.println(future.get().toString());
                    } catch (InterruptedException | ExecutionException e) {
                        throw new RuntimeException(e);
                    }
                }
            });
        }
        if(true) return;

        File file = new File(path);
        Scanner scanner = new Scanner(file);
        long initialDate = new Date().getTime();

        int counter = 0;

        while (scanner.hasNext()) {
            String string = scanner.nextLine();
            System.out.printf("Process %d lines %n", counter++);
        }


        long totalTime = new Date().getTime() - initialDate;

        long hours = TimeUnit.MILLISECONDS.toHours(totalTime);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(totalTime) % 60;
        long seconds = TimeUnit.MILLISECONDS.toSeconds(totalTime) % 60;

        String formatTime = String.format("%02d:%02d:%02d", hours, minutes, seconds);

        System.out.println("Time to end: " + formatTime);

        return;
    }

    private static List<MappedByteBuffer> buildChunks(RandomAccessFile file) throws IOException {
        var fileSize = file.length();
        var chunkSize = Math.min(Integer.MAX_VALUE - 512, fileSize / Runtime.getRuntime().availableProcessors());
        if (chunkSize <= 0) {
            chunkSize = fileSize;
        }
        var chunks = new ArrayList<MappedByteBuffer>((int) (fileSize / chunkSize) + 1);
        var start = 0L;
        while (start < fileSize) {
            var pos = start + chunkSize;
            if (pos < fileSize) {
                file.seek(pos);
                while (file.read() != '\n') {
                    pos += 1;
                }
                pos += 1;
            }
            else {
                pos = fileSize;
            }
            var buf = file.getChannel().map(FileChannel.MapMode.READ_ONLY, start, pos - start);
            buf.order(ByteOrder.nativeOrder());
            chunks.add(buf);
            start = pos;
        }
        return chunks;
    }
}
